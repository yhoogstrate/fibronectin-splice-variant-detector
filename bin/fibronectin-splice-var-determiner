#!/usr/bin/env python
# *- coding: utf-8 -*-
# vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79:

"""[License: GNU General Public License v3 (GPLv3)]

    fibronectin-splice-variant-detector: counts Fibronectin (FN1) alt. splicing in BAM files
    Copyright (C) 2024  Youri Hoogstrate, Tobias Weiss and Pim French

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.


    You can contact me via the github repository at the following url:
    <https://github.com/yhoogstrate/fibronectin-splice-var-determiner>

    You can e-mail me via 'y.hoogstrate' at the following webmail domain:
    gmail dot com
"""


import fn1splicevardeterminer

import click
from tqdm import tqdm


def sam_to_sorted_bam(sam, sorted_bam):
    fhq = open(bam_file, "wb")
    fhq.write(pysam.view('-b', sam))
    fhq.close()

    alignment_handle = ChimericAlignment(bam_file)
    return alignment_handle.convert(fixed_bam, T_TEST_DIR)


def main():
    CLI()


@click.command()
@click.version_option(fn1splicevardeterminer.__version__ + "\n\n" + fn1splicevardeterminer.__license_notice__ + "\n\nCopyright (C) 2019  " + fn1splicevardeterminer.__author__ + ".\n\nFor more info please visit:\n" + fn1splicevardeterminer.__homepage__)
@click.option("--reference-build", "-r", required=True, type=click.Choice(['hg19', 'hg38']), help="Used reference genome (needed for EGFR exon coordinates)")
@click.option('--spliced-reads-only', "-s", is_flag=True, help="If paired end reads with an insert size longer than 801 bases can be expected, wild-type exon-1 to exon-8 covering reads can can be expected. Enabling this flag only uses spliced reads for vIII determination.")
@click.option('--read-names', "-n", is_flag=True, help="Report all read-names instead of the read counts.")
@click.option('--include-interchromosomal', "-i", is_flag=True, help="Include paired-end reads that have an interchromosomal mapped mate (disabled by default).")
@click.option('--dataset-suffix', "-d", type=(str), default="", help="Adds this suffix to the column names; tabs and newlines not allowed.")
@click.option('--include-duplicates', "-f", is_flag=True, help="Force including duplicate reads (as marked by samtools/sambamba/picard etc. - disabled by default).")
@click.argument('input_bam', type=click.Path(exists=True),nargs=-1)
def CLI(reference_build, spliced_reads_only, read_names, input_bam, include_interchromosomal, dataset_suffix, include_duplicates):
    from fn1splicevardeterminer import fn1splicevardeterminer

    dataset_suffix = dataset_suffix.replace("\t","").replace("\n","")

    if reference_build not in fn1splicevardeterminer.fn1_exons:
        raise Exception("unknown reference build")

    if read_names:
        print("sample\tread-name\twt/splice-variant-status"+dataset_suffix)
    else:
        print("sample\t" +
        
              "7B89: wt reads [24 -> 26]" + dataset_suffix + "\t" +
              "7B89: sv reads [24 -> 25]" + dataset_suffix + "\t" +
              "7B89: sv reads [25 -> 26]" + dataset_suffix + "\t" +
              "7B89: sv reads [24 -> 25 -> 26]" + dataset_suffix + "\t" +
              "7B89: discrepant reads" + "\t"
              
              
              "11A12: wt reads [24 -> 26]" + dataset_suffix + "\t" +
              "11A12: sv reads [24 -> 25]" + dataset_suffix + "\t" +
              "11A12: sv reads [25 -> 26]" + dataset_suffix + "\t" +
              "11A12: sv reads [24 -> 25 -> 26]" + dataset_suffix + "\t" +
              "11A12: discrepant reads" )
    
    for _ in tqdm(input_bam):
        if not spliced_reads_only:
            stats_7B89 = fn1splicevardeterminer.extract_FN1_7B89_sv_reads(_, fn1splicevardeterminer.fn1_exons[reference_build], include_interchromosomal, include_duplicates)
            stats_11A12 = fn1splicevardeterminer.extract_FN1_11A12_sv_reads(_, fn1splicevardeterminer.fn1_exons[reference_build], include_interchromosomal, include_duplicates)
        else:
            stats_7B89 = fn1splicevardeterminer.extract_FN1_7B89_sv_reads_based_on_sjs(_, fn1splicevardeterminer.fn1_exons[reference_build], include_interchromosomal, include_duplicates)
            stats_11A12 = fn1splicevardeterminer.extract_FN1_11A12_sv_reads_based_on_sjs(_, fn1splicevardeterminer.fn1_exons[reference_build], include_interchromosomal, include_duplicates)
        
        if read_names:
            for key in sorted(stats_7B89.keys()):
                for readname in sorted(stats_7B89[key]):
                    print(_ + "\t" + readname + "\t" + key)

            for key in sorted(stats_11A12.keys()):
                for readname in sorted(stats_11A12[key]):
                    print(_ + "\t" + readname + "\t" + key)


        else:
            print(_ + "\t" + str(len(stats_7B89['7B89: wt read [24 -> 26]'])) + "\t" +
                             str(len(stats_7B89['7B89: sv read [24 -> 25]'])) + "\t" +
                             str(len(stats_7B89['7B89: sv read [25 -> 26]'])) + "\t" +
                             str(len(stats_7B89['7B89: sv read [24 -> 25 -> 26]'])) + "\t" +
                             str(len(stats_7B89['7B89: discrepant read'])) + "\t" +
                             
                             str(len(stats_11A12['11A12: wt read [31 -> 33]'])) + "\t" +
                             str(len(stats_11A12['11A12: sv read [31 -> 32]'])) + "\t" +
                             str(len(stats_11A12['11A12: sv read [32 -> 33]'])) + "\t" +
                             str(len(stats_11A12['11A12: sv read [31 -> 32 -> 33]'])) + "\t" +
                             str(len(stats_11A12['11A12: discrepant read']))
                            )
    
    return True


if __name__ == '__main__':
    main()


